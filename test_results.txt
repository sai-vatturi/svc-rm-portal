============================= test session starts =============================
platform win32 -- Python 3.13.5, pytest-8.4.2, pluggy-1.6.0
rootdir: C:\Users\Admin\Documents\svc-rm-portal
configfile: pyproject.toml
plugins: anyio-4.11.0, asyncio-1.2.0, cov-7.0.0
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 55 items

tests\e2e\test_auth_login_flow.py .......                                [ 12%]
tests\e2e\test_health.py .                                               [ 14%]
tests\e2e\test_open_routes_list.py .                                     [ 16%]
tests\e2e\test_openapi.py .                                              [ 18%]
tests\unit\test_attachments_post.py .                                    [ 20%]
tests\unit\test_attachments_router.py .                                  [ 21%]
tests\unit\test_attachments_router_extended.py F                         [ 23%]
tests\unit\test_auth_router.py .                                         [ 25%]
tests\unit\test_auth_service.py ....                                     [ 32%]
tests\unit\test_catalog_router.py ..                                     [ 36%]
tests\unit\test_catalog_router_extended.py F                             [ 38%]
tests\unit\test_config.py .                                              [ 40%]
tests\unit\test_db_client.py .                                           [ 41%]
tests\unit\test_db_indexes_client.py ..                                  [ 45%]
tests\unit\test_errors_and_logging.py .....                              [ 54%]
tests\unit\test_pagination.py .                                          [ 56%]
tests\unit\test_pagination_extra.py .                                    [ 58%]
tests\unit\test_rbac_repo.py .                                           [ 60%]
tests\unit\test_rbac_router.py ..                                        [ 63%]
tests\unit\test_rbac_router_extended.py F                                [ 65%]
tests\unit\test_release_router.py .                                      [ 67%]
tests\unit\test_release_router_extended.py F                             [ 69%]
tests\unit\test_release_router_negative.py ..                            [ 72%]
tests\unit\test_release_service.py .                                     [ 74%]
tests\unit\test_repositories_attachment.py .                             [ 76%]
tests\unit\test_repositories_catalog.py .                                [ 78%]
tests\unit\test_repositories_release.py .                                [ 80%]
tests\unit\test_security.py .........F                                   [ 98%]
tests\unit\test_utils_serial.py .                                        [100%]

================================== FAILURES ===================================
_______________________ test_attachment_get_and_delete ________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001225754E570>

    @pytest.mark.asyncio
    async def test_attachment_get_and_delete(monkeypatch):
        from app.core import security as sec
        class _P:
            permissions = {"can_upload_attachments": True}
        app.dependency_overrides[sec.get_current_user] = lambda: _P()
    
        now = datetime.utcnow().isoformat() + "Z"
        store = {}
    
        class _Attachments:
            async def find_one(self, q):
                oid = q.get("_id")
                return store.get(oid)
            async def delete_one(self, q):
                oid = q.get("_id")
                existed = 1 if store.pop(oid, None) else 0
                class _Res: deleted_count = existed
                return _Res()
            def find(self, filters):  # noqa: ARG002
                class _Cursor:
                    def __init__(self, docs): self._docs = list(docs)
                    def sort(self, *_): return self
                    def limit(self, *_): return self
                    def __aiter__(self):
                        async def _gen():
                            for d in self._docs: yield d
                        return _gen()
                return _Cursor(store.values())
            async def insert_one(self, data):
                oid = str(ObjectId())
                doc = {**data, "_id": oid}
                store[oid] = doc
                class _Res: inserted_id = oid
                return _Res()
    
        class _DB:
            attachments = _Attachments()
    
        from app.routers import attachments as mod
        monkeypatch.setattr(mod, "get_db", lambda: _DB())
    
        # seed one
        payload = {"file_name": "a.txt", "file_type": "text/plain", "file_size": 1, "file_url": "http://x/a.txt", "sha256": "sha1", "tags": [], "uploaded_at": now, "links": []}
    
        transport = ASGITransport(app=app)
        async with AsyncClient(transport=transport, base_url="http://test") as ac:
            c = await ac.post("/attachments", json=payload)
            assert c.status_code == 200
>           att_id = c.json()["id"]
                     ^^^^^^^^^^^^^^
E           KeyError: 'id'

tests\unit\test_attachments_router_extended.py:58: KeyError
______________________________ test_catalog_crud ______________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x00000122576B83D0>

    @pytest.mark.asyncio
    async def test_catalog_crud(monkeypatch):
        # Permission principal
        from app.core import security as sec
        class _P:
            permissions = {"can_manage_roles": True}
        app.dependency_overrides[sec.get_current_user] = lambda: _P()
    
        # Simple in-memory stores
        apps: dict[str, dict] = {}
        squads_store: dict[str, dict] = {}
        boards_store: dict[str, dict] = {}
    
        class _Collection:
            def __init__(self, store, key_field):
                self.store = store
                self.key_field = key_field
            async def find_one(self, q):
                if "_id" in q:
                    return self.store.get(q["_id"]) or None
                k = list(q.values())[0]
                for v in self.store.values():
                    if v.get(self.key_field) == k:
                        return v
                return None
            async def insert_one(self, data):
                oid = str(ObjectId())
                doc = {**data, "_id": oid}
                self.store[oid] = doc
                class _Res: inserted_id = oid
                return _Res()
            async def delete_one(self, q):
                oid = q.get("_id")
                existed = 1 if self.store.pop(oid, None) else 0
                class _Res: deleted_count = existed
                return _Res()
            async def update_one(self, q, update):  # noqa: ARG002
                oid = q.get("_id")
                if oid not in self.store:
                    return type("_R", (), {"matched_count": 0})()
                if "$set" in update:
                    self.store[oid].update(update["$set"])
                return type("_R", (), {"matched_count": 1})()
            def find(self):
                class _Cursor:
                    def __init__(self, items): self._items = list(items)
                    def sort(self, *_): return self
                    def __aiter__(self):
                        async def _gen():
                            for i in self._items: yield i
                        return _gen()
                return _Cursor(self.store.values())
    
        class _DB:
            applications = _Collection(apps, "application_id")
            squads = _Collection(squads_store, "squad_id")
            jiraboards = _Collection(boards_store, "board_id")
    
        from app.routers import catalog as mod
        monkeypatch.setattr(mod, "get_db", lambda: _DB())
    
        transport = ASGITransport(app=app)
        async with AsyncClient(transport=transport, base_url="http://test") as ac:
            # create app
            r1 = await ac.post("/catalog/applications", json={"application_id": "A1", "application_name": "App", "technologies": [], "products": []})
            assert r1.status_code == 200
>           aid = r1.json()["id"]
                  ^^^^^^^^^^^^^^^
E           KeyError: 'id'

tests\unit\test_catalog_router_extended.py:74: KeyError
________________________ test_rbac_role_and_user_crud _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001225768F230>

    @pytest.mark.asyncio
    async def test_rbac_role_and_user_crud(monkeypatch):
        # Override principal with manage_roles permission
        from app.core import security as sec
    
        class _P:
            permissions = {"can_manage_roles": True}
            user = type("U", (), {"id": "admin"})()
    
        app.dependency_overrides[sec.get_current_user] = lambda: _P()
    
        # In-memory store
        roles: dict[str, Role] = {}
        users: dict[str, User] = {}
    
        from app.utils.time import utcnow as _utcnow
    
        class _Repo:
            async def create_role(self, role: Role):  # noqa: ARG002
                r = Role(_id="r1", role_name="Role1", created_at=_utcnow())
                roles[r.id] = r
                return r
            async def list_roles(self):
                return list(roles.values())
            async def get_role_by_id(self, rid: str):
                return roles.get(rid)
            async def update_role(self, rid: str, patch):  # noqa: ARG002
                r = roles.get(rid)
                if not r:
                    return None
                data = r.model_dump()
                data.update({k: v for k, v in patch.model_dump(exclude_unset=True).items() if v is not None})
                roles[rid] = Role(**{**data, "created_at": r.created_at})
                return roles[rid]
            async def delete_role(self, rid: str):
                return 1 if roles.pop(rid, None) else 0
            async def find_user_by_id(self, uid: str):
                return users.get(uid)
            async def list_users(self, skip=0, limit=50):  # noqa: ARG002
                return list(users.values())
            async def update_user(self, uid: str, patch):  # noqa: ARG002
                u = users.get(uid)
                if not u:
                    return None
                data = u.model_dump()
                data.update({k: v for k, v in patch.model_dump(exclude_unset=True).items() if v is not None})
                users[uid] = User(**{**data, "created_at": u.created_at})
                return users[uid]
            async def delete_user(self, uid: str):
                return 1 if users.pop(uid, None) else 0
    
        class _AuthSvc:
            async def register_user(self, payload):  # noqa: ARG002
                u = User(_id="u1", username="user1", full_name="U One", email="u1@example.com", password_hash="h", role_ids=[], assigned_squad_ids=[], created_at=_utcnow())
                users[u.id] = u  # type: ignore[attr-defined]
                return u
    
        from app.routers import rbac as mod
        monkeypatch.setattr(mod, "repo", lambda: _Repo())
        app.dependency_overrides[mod.auth_service] = lambda: _AuthSvc()
    
        transport = ASGITransport(app=app)
        async with AsyncClient(transport=transport, base_url="http://test") as ac:
            # Create role
            resp = await ac.post("/rbac/roles", json={"role_name": "Role1", "created_at": utcnow().isoformat()})
            assert resp.status_code == 200
>           rid = resp.json()["id"]
                  ^^^^^^^^^^^^^^^^^
E           KeyError: 'id'

tests\unit\test_rbac_router_extended.py:75: KeyError
_______________________ test_release_delete_and_extras ________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x000001225768F850>

    @pytest.mark.asyncio
    async def test_release_delete_and_extras(monkeypatch):
        now = datetime.now(timezone.utc).isoformat()
        from app.core import security as sec
        class _P:
            permissions = {
                "can_create_release": True,
                "can_manage_quality_gates": True,
                "can_upload_attachments": True,
                "can_manage_runbooks": True,
                "is_approval_manager": True,
                "can_edit_release_description": True,
            }
            user = type("U", (), {"id": "u1"})()
            role_names = ["Admin"]
        app.dependency_overrides[sec.get_current_user] = lambda: _P()
    
        # minimal in-memory db
        class _Releases:
            def __init__(self): self._store = {}
            async def find_one(self, q):
                if "_id" in q: return self._store.get(q["_id"]) or None
                if "release_id" in q:
                    for d in self._store.values():
                        if d.get("release_id") == q["release_id"]: return d
                return None
            async def insert_one(self, data):
                oid = ObjectId()
                doc = {**data, "_id": oid}
                self._store[oid] = doc
                class _R: inserted_id = oid
                return _R()
            def find(self, filters):  # noqa: ARG002
                class _Cursor:
                    def __init__(self, docs): self._docs = list(docs)
                    def sort(self, *_): return self
                    def limit(self, *_): return self
                    def __aiter__(self):
                        async def _gen():
                            for d in self._docs: yield d
                        return _gen()
                return _Cursor(self._store.values())
            async def update_one(self, q, update, array_filters=None):  # noqa: ARG002
                oid = q.get("_id")
                doc = self._store.get(oid)
                class _Res: matched_count = 0; modified_count = 0
                if not doc: return _Res()
                _Res.matched_count = 1
                if "$push" in update:
                    for k, v in update["$push"].items():
                        if k == "products": doc.setdefault("products", []).append(v)
                        elif k == "attachment_refs": doc.setdefault("attachment_refs", []).append(v)
                        elif k == "runbooks": doc.setdefault("runbooks", []).append(v)
                        elif k.startswith("products.$[p].quality_gates"):
                            # simplified; not fully simulating nested pushes
                            doc.setdefault("products", [])
                if "$set" in update:
                    # naive set
                    for k, v in update["$set"].items(): doc[k] = v
                if "$pull" in update:
                    for k, v in update["$pull"].items():
                        if k == "products":
                            doc["products"] = [p for p in doc.get("products", []) if p.get("product_id") != v.get("product_id")]
                        elif k == "runbooks":
                            doc["runbooks"] = [rb for rb in doc.get("runbooks", []) if rb.get("runbook_id") != v.get("runbook_id")]
                        elif k == "attachment_refs":
                            doc["attachment_refs"] = [a for a in doc.get("attachment_refs", []) if a.get("sha256") != v.get("sha256")]
                return _Res()
    
        class _DB: releases = _Releases()
    
        from app.routers import release as mod
        monkeypatch.setattr(mod, "get_db", lambda: _DB())
    
        transport = ASGITransport(app=app)
        async with AsyncClient(transport=transport, base_url="http://test") as ac:
            payload = {"release_id": "REL-Z", "release_name": "RZ", "release_date": now, "created_at": now, "products": [], "attachment_refs": []}
            cr = await ac.post("/releases", json=payload)
>           rid = cr.json()["id"]
                  ^^^^^^^^^^^^^^^
E           KeyError: 'id'

tests\unit\test_release_router_extended.py:87: KeyError
________________ test_require_permissions_enforces_and_passes _________________

    @pytest.mark.asyncio
    async def test_require_permissions_enforces_and_passes():
        principal = CurrentPrincipal(user=None, role_names=[], permissions={"a": True, "b": False})
    
        # missing permission -> 403
        checker = require_permissions("b")
>       with pytest.raises(Exception) as ei:
             ^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'Exception'>

tests\unit\test_security.py:166: Failed
============================== warnings summary ===============================
app\main.py:91
  C:\Users\Admin\Documents\svc-rm-portal\app\main.py:91: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    @app.on_event("startup")

.venv\Lib\site-packages\fastapi\applications.py:4523
.venv\Lib\site-packages\fastapi\applications.py:4523
  C:\Users\Admin\Documents\svc-rm-portal\.venv\Lib\site-packages\fastapi\applications.py:4523: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    return self.router.on_event(event_type)

app\main.py:97
  C:\Users\Admin\Documents\svc-rm-portal\app\main.py:97: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    @app.on_event("shutdown")

tests/e2e/test_auth_login_flow.py::test_login_missing_fields_returns_422
tests/unit/test_release_router_negative.py::test_conflict_and_bad_requests_and_not_found
tests/unit/test_release_router_negative.py::test_conflict_and_bad_requests_and_not_found
tests/unit/test_release_router_negative.py::test_conflict_and_bad_requests_and_not_found
  C:\Users\Admin\Documents\svc-rm-portal\.venv\Lib\site-packages\starlette\_exception_handler.py:59: DeprecationWarning: 'HTTP_422_UNPROCESSABLE_ENTITY' is deprecated. Use 'HTTP_422_UNPROCESSABLE_CONTENT' instead.
    response = await handler(conn, exc)

tests/unit/test_attachments_router.py::test_list_attachments_pagination
  C:\Users\Admin\Documents\svc-rm-portal\tests\unit\test_attachments_router.py:26: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = datetime.utcnow().isoformat() + "Z"

tests/unit/test_attachments_router_extended.py::test_attachment_get_and_delete
  C:\Users\Admin\Documents\svc-rm-portal\tests\unit\test_attachments_router_extended.py:16: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    now = datetime.utcnow().isoformat() + "Z"

tests/unit/test_errors_and_logging.py::test_http_exception_handler_maps_codes
  C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.13_3.13.1520.0_x64__qbz5n2kfra8p0\Lib\asyncio\events.py:89: DeprecationWarning: 'HTTP_422_UNPROCESSABLE_ENTITY' is deprecated. Use 'HTTP_422_UNPROCESSABLE_CONTENT' instead.
    self._context.run(self._callback, *self._args)

tests/unit/test_errors_and_logging.py::test_http_exception_handler_maps_codes
tests/unit/test_errors_and_logging.py::test_http_exception_handler_maps_codes
  C:\Users\Admin\Documents\svc-rm-portal\tests\unit\test_errors_and_logging.py:29: DeprecationWarning: 'HTTP_422_UNPROCESSABLE_ENTITY' is deprecated. Use 'HTTP_422_UNPROCESSABLE_CONTENT' instead.
    res = await http_exception_handler(FakeReq(), HTTPException(status_code=code, detail="x"))

tests/unit/test_errors_and_logging.py::test_validation_exception_handler_formats_errors
  C:\Users\Admin\Documents\svc-rm-portal\tests\unit\test_errors_and_logging.py:53: DeprecationWarning: 'HTTP_422_UNPROCESSABLE_ENTITY' is deprecated. Use 'HTTP_422_UNPROCESSABLE_CONTENT' instead.
    res = await validation_exception_handler(object(), rve)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=============================== tests coverage ================================
_______________ coverage: platform win32, python 3.13.5-final-0 _______________

Name                                  Stmts   Miss  Cover   Missing
-------------------------------------------------------------------
app\__init__.py                           0      0   100%
app\core\__init__.py                      0      0   100%
app\core\config.py                       29      0   100%
app\core\errors.py                       39      0   100%
app\core\logging.py                       8      0   100%
app\core\pagination.py                   22      0   100%
app\core\security.py                     64      4    94%   91, 105-107
app\db\__init__.py                        0      0   100%
app\db\client.py                         18      0   100%
app\db\indexes.py                        13      0   100%
app\main.py                              63      6    90%   93-95, 99-100, 130
app\models\__init__.py                    0      0   100%
app\models\attachment.py                 28      0   100%
app\models\catalog.py                    34      0   100%
app\models\common.py                     13      0   100%
app\models\rbac.py                       75      0   100%
app\models\release.py                   128      0   100%
app\repositories\__init__.py              0      0   100%
app\repositories\attachment_repo.py      54     15    72%   17, 35, 37, 48-49, 53-57, 60-64
app\repositories\catalog_repo.py        104     57    45%   29-36, 39-47, 50-51, 66-73, 76-84, 87-88, 103-110, 113-121, 124-125
app\repositories\rbac_repo.py            94     28    70%   22, 57-65, 68-69, 72-76, 105-106, 109-117
app\repositories\release_repo.py         12      0   100%
app\routers\__init__.py                   0      0   100%
app\routers\attachments.py               51     11    78%   15, 37, 41, 57-60, 65-68
app\routers\auth.py                      38      2    95%   32, 50
app\routers\catalog.py                  118     59    50%   15, 35-36, 42-45, 50-53, 58-61, 66-73, 81-82, 88-91, 96-99, 104-107, 112-119, 127-128, 134-137, 142-145, 150-153
app\routers\health.py                     7      0   100%
app\routers\rbac.py                      67     24    64%   15, 19, 35-38, 43-46, 51-54, 65-66, 79-82, 87-90
app\routers\release.py                  301     79    74%   51, 86, 98, 106-113, 131-139, 148, 151-156, 174-181, 190, 193-202, 212, 218, 221, 225, 229, 268, 276-281, 286-293, 311, 323, 331-336, 345, 353-360, 369
app\services\__init__.py                  0      0   100%
app\services\rbac_service.py             24      1    96%   18
app\services\release_service.py          23      0   100%
app\utils\__init__.py                     0      0   100%
app\utils\serial.py                       6      0   100%
app\utils\time.py                         4      0   100%
-------------------------------------------------------------------
TOTAL                                  1437    286    80%
=========================== short test summary info ===========================
FAILED tests/unit/test_attachments_router_extended.py::test_attachment_get_and_delete
FAILED tests/unit/test_catalog_router_extended.py::test_catalog_crud - KeyErr...
FAILED tests/unit/test_rbac_router_extended.py::test_rbac_role_and_user_crud
FAILED tests/unit/test_release_router_extended.py::test_release_delete_and_extras
FAILED tests/unit/test_security.py::test_require_permissions_enforces_and_passes
================== 5 failed, 50 passed, 14 warnings in 6.19s ==================
